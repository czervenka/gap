#!/bin/zsh
# set -e 

ROOT_PATH="$(cd `dirname $0`/.. && pwd)"

VENV_DIR="$ROOT_PATH/tmp/.gap-test-venv"
VIRTUALENV_BIN='rvirtualenv'

_mk_virt() {
    $VIRTUALENV_BIN "$VENV_DIR" 2>&1 > /dev/null
}

_rm_virt() {
    rm -rf "$VENV_DIR"
}

_get_version() {
    python "$ROOT_PATH/gap/__init__.py"
}

_mk_sdist() {
    cd "$ROOT_PATH"
    ./setup.py -q sdist || {_err "Building failed."; return 255;}
    echo "$ROOT_PATH/dist/gap-`_get_version`.tar.gz"
}

_check_sdist() {
    echo
    echo -n '    create dist ... '
    dist=`_mk_sdist`
    if [ -f "$dist" ]; then
       echo 'OK'
    else
       echo 'ERR'
       _err "Source distribution building failed ($dist)."
       return 255
    fi
    echo -n "    install `basename $dist` ... "
    _mk_virt
    cd "$ROOT_PATH/tmp"
    if pip install --force-reinstall -q $dist; then
        _test_ok
    else
        _test_err
    fi

    echo -n "    gap start-project ... "
    rm -rf gaptestproject
    if gap start-project gaptestproject 1> /tmp/.gaptestlog 2>/tmp/.gaptestlog; then
        _test_ok
    else
        _test_err
    fi
    echo -n "    installing test requirements ... "
    cd gaptestproject
    if pip install -q -r tests/requirements.pip; then
        _test_ok
    else
        _test_err
    fi
    echo -n "    running tests ... "
    if tests/run_tests.py 1> /tmp/.gaptestlog 2> /tmp/.gaptestlog; then
        _test_ok
    else
        _test_err
    fi
    cd ..
    rm -rf gaptestproject
    _rm_virt
}

_check_pypi_pkg() {
    _mk_virt
    pip install -q 'gap=='`_get_version`
    _rm_virt
}

_git_tag() {
    git tag `_get_version`
}

_err() {
    echo -e "\033[31mE: \033[0m$@"
}

_info() {
    echo -e "\033[34mI: \033[0m$@"
}

_err_trap() {
    LINE_NO="$1"
    MESSAGE="$2"
    CODE="$3"
    _err "Error at or near $LINE_NO with message: $MESSAGE"
    _rm_virt
    exit "$CODE"
}

_test_ok() {
    echo "\033[32mOK\033[0m"
}

_test_skipped() {
    echo "\033[33mSKIPPED\033[0m"
}

_test_err() {
    echo "\033[31mERR\033[0m"
    if [ -f /tmp/.gaptestlog ]; then
        echo 'Log:'
        echo -en "\e[93m"
        cat /tmp/.gaptestlog
        echo -en "\e[0m"
    fi
    exit 255
}

_main() {
    proof=true
    verbose=false
    version=`_get_version`
    while [ ! -z $1 ]; do
        case $1; in
            --upload|-u)
                proof=false
                ;;
            --verbose|-v)
                verbose=true
                ;;
        esac
        shift
    done
    echo "Options (Gap $version):"
    echo -n 'Verbose: '; $verbose && echo 'yes' || echo 'no'
    echo -n 'Upload: '; $proof && echo 'no' || echo 'yes'
    echo
    echo  'Press any key to continue or <ctrl-c> to exit ...'
    echo
    read -rs -k 1 resp


    if $verbose; then
        set -x
    fi

    echo -n 'Tests ... '
    if $ROOT_PATH/setup.py -q test 2> /tmp/.gaptestlog; then
        _test_ok
    else
        _test_err
    fi

    echo -n 'Build:'
    if ! _check_sdist; then
        _test_err
    fi

    echo -n 'Upload to pypi.python.org ... '
    if ! $proof; then
        cd "$ROOT_PATH"
        if ./setup.py -q sdist upload; then
            _test_ok
        else
            _test_err
        fi
        echo -n 'Tagging new version ... '
        _git_tag && _test_ok || _test_err

        echo -n 'Installing from pypi ... '
        if _check_pypi_pkg; then
            _test_ok
        else
            _test_err
        fi
    else
        echo "SKIPPED"
    fi

    echo "\e[34mOK\e[0m! (pip installed gap version = $version)"
}


trap '_err_trap ${LINENO}' ERR

_main "$@"
